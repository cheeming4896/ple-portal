(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue'), require('jsvectormap')) :
  typeof define === 'function' && define.amd ? define(['vue', 'jsvectormap'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.VueVectorMap = factory(global.vue, global.jsVectorMap));
})(this, (function (vue, jsVectorMap) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var jsVectorMap__default = /*#__PURE__*/_interopDefaultLegacy(jsVectorMap);

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  var globals = {};

  var Component = vue.defineComponent({
    name: 'vuevectormap',
    inheritAttrs: false,
    props: {
      options: Object,
      width: {
        type: [Number, String],
        default: 650
      },
      height: {
        type: [Number, String],
        default: 350
      }
    },
    data: function data() {
      return {
        map: {}
      };
    },
    setup: function setup(props) {
      var listeners = {};
      var instance = vue.getCurrentInstance();
      var uid = "__vm__" + instance.uid;

      for (var _i = 0, _Object$entries = Object.entries(vue.useAttrs()); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _Object$entries[_i],
            name = _Object$entries$_i[0],
            fn = _Object$entries$_i[1];

        if (name.startsWith('on')) {
          listeners[name] = fn;
        }
      }

      vue.onMounted(function () {
        instance.data.map = new jsVectorMap__default["default"](_extends({
          selector: "#" + uid
        }, globals, props.options, listeners));
      });
      return function () {
        return vue.h('div', {
          id: uid,
          style: {
            height: props.height + "px",
            width: props.width + "px"
          }
        });
      };
    }
  });

  var index = {
    install: function install(app, options) {
      if (options === void 0) {
        options = {};
      }

      Object.entries(options).forEach(function (_ref) {
        var key = _ref[0],
            value = _ref[1];
        globals[key] = value;
      });
      app.component('vuevectormap', Component);
    }
  };

  return index;

}));
